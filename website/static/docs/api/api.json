{
  "swagger": "2.0",
  "paths": {
    "/cache": {
      "delete": {
        "description": "Removes the specified entry and its children from the cache.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "cache"
        ],
        "summary": "Remove items from the cache",
        "operationId": "cacheDelete",
        "parameters": [
          {
            "type": "string",
            "description": "uniquely identifies an entry",
            "name": "Path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {},
          "500": {
            "$ref": "#/responses/errorResp"
          }
        }
      }
    },
    "/fs/exec": {
      "post": {
        "description": "Executes a command on the remote system described by the supplied path.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "exec"
        ],
        "summary": "Execute a command on a remote system",
        "operationId": "executeCommand",
        "parameters": [
          {
            "x-go-name": "Cmd",
            "description": "Name of the executable to invoke",
            "name": "cmd",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Args",
            "description": "Array of arguments to the executable",
            "name": "args",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "x-go-name": "Opts",
            "description": "Additional execution options",
            "name": "opts",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ExecOptions"
            }
          },
          {
            "type": "string",
            "description": "uniquely identifies an entry",
            "name": "Path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ExecPacket"
          },
          "400": {
            "$ref": "#/responses/errorResp"
          },
          "404": {
            "$ref": "#/responses/errorResp"
          },
          "500": {
            "$ref": "#/responses/errorResp"
          }
        }
      }
    },
    "/fs/info": {
      "get": {
        "description": "Returns an Entry object describing the given path.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "info"
        ],
        "summary": "Info about entry at path",
        "operationId": "entryInfo",
        "parameters": [
          {
            "type": "string",
            "description": "uniquely identifies an entry",
            "name": "Path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Entry"
          },
          "400": {
            "$ref": "#/responses/errorResp"
          },
          "404": {
            "$ref": "#/responses/errorResp"
          },
          "500": {
            "$ref": "#/responses/errorResp"
          }
        }
      }
    },
    "/fs/list": {
      "get": {
        "description": "Returns a list of Entry objects describing children of the given path.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "list"
        ],
        "summary": "Lists children of a path",
        "operationId": "listEntries",
        "parameters": [
          {
            "type": "string",
            "description": "uniquely identifies an entry",
            "name": "Path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/entryList"
          },
          "400": {
            "$ref": "#/responses/errorResp"
          },
          "404": {
            "$ref": "#/responses/errorResp"
          },
          "500": {
            "$ref": "#/responses/errorResp"
          }
        }
      }
    },
    "/fs/metadata": {
      "get": {
        "description": "Get metadata about the specified entry.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "metadata"
        ],
        "summary": "Get metadata",
        "operationId": "getMetadata",
        "parameters": [
          {
            "type": "string",
            "description": "uniquely identifies an entry",
            "name": "Path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/entryMetadata"
          },
          "404": {
            "$ref": "#/responses/errorResp"
          },
          "500": {
            "$ref": "#/responses/errorResp"
          }
        }
      }
    },
    "/fs/read": {
      "get": {
        "description": "Read content from the specified entry.",
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "read"
        ],
        "summary": "Read content",
        "operationId": "readContent",
        "parameters": [
          {
            "type": "string",
            "description": "uniquely identifies an entry",
            "name": "Path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/octetResponse"
          },
          "404": {
            "$ref": "#/responses/errorResp"
          },
          "500": {
            "$ref": "#/responses/errorResp"
          }
        }
      }
    },
    "/fs/stream": {
      "get": {
        "description": "Get a stream of new updates to the specified entry.",
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "stream"
        ],
        "summary": "Stream updates",
        "operationId": "streamUpdates",
        "parameters": [
          {
            "type": "string",
            "description": "uniquely identifies an entry",
            "name": "Path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/octetResponse"
          },
          "404": {
            "$ref": "#/responses/errorResp"
          },
          "500": {
            "$ref": "#/responses/errorResp"
          }
        }
      }
    },
    "/history": {
      "get": {
        "description": "Get a list of commands that have been run via Wash and when they were run.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "history"
        ],
        "summary": "Get command history",
        "operationId": "retrieveHistory",
        "parameters": [
          {
            "type": "boolean",
            "description": "stream updates when true",
            "name": "Follow",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HistoryResponse"
          },
          "400": {
            "$ref": "#/responses/errorResp"
          },
          "404": {
            "$ref": "#/responses/errorResp"
          },
          "500": {
            "$ref": "#/responses/errorResp"
          }
        }
      }
    },
    "/history/{id}": {
      "get": {
        "description": "Get the logs related to a particular command run via Wash, requested by\nindex within its activity history.",
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "journal"
        ],
        "summary": "Get logs for a particular entry in history",
        "operationId": "getJournal",
        "parameters": [
          {
            "type": "boolean",
            "description": "stream updates when true",
            "name": "Follow",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/octetResponse"
          },
          "400": {
            "$ref": "#/responses/errorResp"
          },
          "404": {
            "$ref": "#/responses/errorResp"
          },
          "500": {
            "$ref": "#/responses/errorResp"
          }
        }
      }
    }
  },
  "definitions": {
    "Activity": {
      "type": "object",
      "title": "Activity describes an activity from Wash's `activity.History`.",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Start"
        }
      },
      "x-go-package": "github.com/puppetlabs/wash/api/types"
    },
    "Entry": {
      "type": "object",
      "title": "Entry represents a Wash entry as interpreted by the API.",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Actions"
        },
        "attributes": {
          "$ref": "#/definitions/EntryAttributes"
        },
        "cname": {
          "type": "string",
          "x-go-name": "CName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        }
      },
      "x-go-package": "github.com/puppetlabs/wash/api/types"
    },
    "EntryAttributes": {
      "description": "Each of the setters supports the builder pattern, which enables you\nto do something like\n\nattr := plugin.EntryAttributes{}\nattr.\nSetCtime(ctime).\nSetMtime(mtime).\nSetMeta(meta)\nentry.SetAttributes(attr)",
      "type": "object",
      "title": "EntryAttributes represents an entry's attributes. We use a struct\ninstead of a map for efficient memory allocation/deallocation,\nwhich is needed to make Group#List fast.",
      "x-go-package": "github.com/puppetlabs/wash/plugin"
    },
    "JSONObject": {
      "description": "JSONObject represents the entry's metadata\nas returned by Entry#Metadata.",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-package": "github.com/puppetlabs/wash/plugin"
    },
    "ErrorFields": {
      "description": "ErrorFields represents the fields of an ErrorObj",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-package": "github.com/puppetlabs/wash/api/types"
    },
    "ErrorObj": {
      "description": "ErrorObj represents an API error object",
      "type": "object",
      "properties": {
        "fields": {
          "$ref": "#/definitions/ErrorFields"
        },
        "kind": {
          "description": "Identifies the kind of error.",
          "type": "string",
          "x-go-name": "Kind"
        },
        "msg": {
          "description": "A description of what failed.",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/puppetlabs/wash/api/types"
    },
    "ExecOptions": {
      "description": "These are not identical to plugin.ExecOptions because initially the API only\nsupports receiving a string of input, not a reader.",
      "type": "object",
      "title": "ExecOptions are options that can be passed as part of an Exec call.",
      "properties": {
        "input": {
          "description": "Input to pass on stdin when executing the command",
          "type": "string",
          "x-go-name": "Input"
        }
      },
      "x-go-package": "github.com/puppetlabs/wash/api/types"
    },
    "ExecPacketType": {
      "type": "string",
      "title": "ExecPacketType identifies the packet type.",
      "x-go-package": "github.com/puppetlabs/wash/plugin"
    },
    "Reader": {
      "description": "Read reads up to len(p) bytes into p. It returns the number of bytes\nread (0 \u003c= n \u003c= len(p)) and any error encountered. Even if Read\nreturns n \u003c len(p), it may use all of p as scratch space during the call.\nIf some data is available but not len(p) bytes, Read conventionally\nreturns what is available instead of waiting for more.\n\nWhen Read encounters an error or end-of-file condition after\nsuccessfully reading n \u003e 0 bytes, it returns the number of\nbytes read. It may return the (non-nil) error from the same call\nor return the error (and n == 0) from a subsequent call.\nAn instance of this general case is that a Reader returning\na non-zero number of bytes at the end of the input stream may\nreturn either err == EOF or err == nil. The next Read should\nreturn 0, EOF.\n\nCallers should always process the n \u003e 0 bytes returned before\nconsidering the error err. Doing so correctly handles I/O errors\nthat happen after reading some bytes and also both of the\nallowed EOF behaviors.\n\nImplementations of Read are discouraged from returning a\nzero byte count with a nil error, except when len(p) == 0.\nCallers should treat a return of 0 and nil as indicating that\nnothing happened; in particular it does not indicate EOF.\n\nImplementations must not retain p.",
      "type": "object",
      "title": "Reader is the interface that wraps the basic Read method.",
      "x-go-package": "io"
    }
  },
  "responses": {
    "Entry": {
      "description": "Entry represents a Wash entry as interpreted by the API.",
      "schema": {
        "$ref": "#/definitions/EntryAttributes"
      },
      "headers": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attributes": {},
        "cname": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "ExecPacket": {
      "description": "ExecPacket is a single packet of results from an exec.\nIf TypeField is Stdout or Stderr, Data will be a string.\nIf TypeField is Exitcode, Data will be an int (or float64 if deserialized from JSON).",
      "schema": {
        "type": "object",
        "$ref": "#/definitions/ErrorObj"
      },
      "headers": {
        "data": {},
        "error": {},
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "type": {}
      }
    },
    "HistoryResponse": {
      "description": "HistoryResponse describes the result returned by the `/history` endpoint.",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Activity"
        }
      }
    },
    "entryList": {
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Entry"
        }
      }
    },
    "entryMetadata": {
      "schema": {
        "$ref": "#/definitions/JSONObject"
      },
      "headers": {
        "JSONObject": {}
      }
    },
    "errorResp": {
      "schema": {
        "type": "object",
        "properties": {
          "fields": {
            "$ref": "#/definitions/ErrorFields"
          },
          "kind": {
            "description": "Identifies the kind of error.",
            "type": "string",
            "x-go-name": "Kind"
          },
          "msg": {
            "description": "A description of what failed.",
            "type": "string",
            "x-go-name": "Msg"
          }
        }
      },
      "headers": {
        "Body": {}
      }
    },
    "octetResponse": {
      "schema": {
        "$ref": "#/definitions/Reader"
      }
    }
  }
}
